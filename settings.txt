start script
read xml, generate data structures
build window
fork a thread for background updates
enter modal block for window








settings

Choose clock (maybe use option="close")

language (spinner)
clock (spinner for choice of xml from language folder)
size (spinner for choice of dimensions from clock xml)

preview (action, call script to demo different themes/clocks)

<setting label="30510" id="language" type="fileenum" values="layouts" mask=".xml" options="hideext" default="English" />


options

sep

http://www.qlocktwo.com/press_images.php
color theme (Black Ice Tea, Vanilla Sugar / Alaska, Stainless Steel, Lime Juice, Frozen Blackberry, Cherry Cake, Dark Chocolate, Blue Candy)

sep

debug...
Debug mode button
force time (debug mode)



======
start, check settings
generate xml
show window
on keypress, exit window


class UnQlocked


class QlockGUI


class Qlock:
	def constructor(layout.xml):
	def getWindowXML():
	self.gui
	



class Panda:
	def __init__( self ):
		# check sys.argv: startup (default) or -update
		# start from scratch, get GUI ready to run
		# find xml from settings
		# load xml and parameters into Qlock
		# create GUI
	def main( self ):
		# verify the invariant
		if self.die
		# doModal()
		# cleanup, sleep, die
	def alarm( self ):
		

class PandaGUI:
	def onInit( self ):
		# get stations (it is possible to init with empty stations)
		
	def onAction( self ):
	def onClick( self ):
	def onFocus( self ):

#check settings

# check params
# if backend param is specified:
#   if window lock isn't set,
#   run background thread
# else create gui window

# if empty, create gui window and start background thread
# else:
#   if background thread isn't running, start it
#   otherwise, do nothing



# load
unqlocked = UnQlocked()
# done loading. (verify the invariant), do modal, die, cleanup
unqlocked.main()
